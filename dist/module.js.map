{"mappings":"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","sources":["src/index.ts","src/execute.ts","src/intelhex.ts","src/format-time.ts","src/compileandrun.js","src/customfunctions.js"],"sourcesContent":["import '@wokwi/elements'\nimport { MemOutElement } from './memoutelements'\nimport { AVRRunner, PORT } from './execute'\nimport { formatTime } from './format-time'\n\nimport { compileAndRun } from './compileandrun'\nimport {\n  extractBit,\n  bytesToInt,\n  bitsToInt,\n  extractByte,\n} from './customfunctions'\n\nwindow.compileAndRun = compileAndRun\nwindow.extractBit = extractBit\nwindow.bytesToInt = bytesToInt\nwindow.bitsToInt = bitsToInt\nwindow.extractByte = extractByte\n\n//import \"./customfunctions\";\n\n//import { WS2812Controller } from \"./ws2812\";\n\nimport { MemOut } from './memout'\n\nimport {\n  BuzzerElement,\n  LEDElement,\n  PushbuttonElement,\n  SevenSegmentElement,\n} from '@wokwi/elements'\n\ndeclare const window: any\n\nfunction pinPort(e: any): [number | null, string | null] {\n  let port: PORT | null\n  let pin = e.getAttribute('pin')\n  pin = pin ? parseInt(pin, 10) : null\n\n  if (pin == null) {\n    port = null\n  } else if (pin < 8) {\n    port = 'D'\n  } else if (pin < 14) {\n    port = 'B'\n  } else if (pin < 20) {\n    port = 'C'\n  } else {\n    port = null\n  }\n\n  return [pin, port]\n}\n\nexport const AVR8jsMem = {\n  /** compiles the program\n   *\n   * @param sketch The cpp code as string\n   *\n   * @param files TODO\n   * @returns\n   */\n\n  build: async function (sketch: string, files = []) {\n    if (!window.__AVR8jsCache) {\n      window.__AVR8jsCache = {}\n    }\n\n    let body = JSON.stringify({ sketch: sketch, files })\n\n    if (window.__AVR8jsCache[body]) {\n      return window.__AVR8jsCache[body]\n    } else {\n      const resp = await fetch('https://hexi.wokwi.com/build', {\n        method: 'POST',\n        mode: 'cors',\n        cache: 'force-cache',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: body,\n      })\n      const rslt = await resp.json()\n\n      window.__AVR8jsCache[body] = rslt\n\n      return rslt\n    }\n  },\n\n  buildASM: async function asmToHex(source: string) {\n    const resp = await fetch('https://hexi.wokwi.com/asm', {\n      method: 'POST',\n      mode: 'cors',\n      cache: 'no-cache',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ source }),\n    })\n    return await resp.json()\n  },\n\n  /** starts the simulation\n   *\n   * @param hex machine code as hex string\n   * @param log log function\n   * @param id id of the div in which the summation is displayed\n   * @param MHZ cpu clock speed in HZ (default=16000000)\n   * @param cyclesPerFrame number of cpu cycles executed in an animation frame\n   * @param frameDelayMilliseconds delay between two animation frames in milliseconds. (0: no delay)\n   * @returns AVRRunner\n   */\n  execute: function (\n    hex: string,\n    log: any,\n    id: string,\n    MHZ: any,\n    cyclesPerFrame: any,\n    frameDelayMilliseconds: any\n  ): AVRRunner {\n    const PORTS: Array<PORT> = ['B', 'C', 'D']\n\n    const container = document.getElementById(id) || document\n\n    const LEDs: NodeListOf<LEDElement & HTMLElement> =\n      container.querySelectorAll('wokwi-led')\n    const SEG7 = container.querySelectorAll<SevenSegmentElement & HTMLElement>(\n      'wokwi-7segment'\n    )\n    const BUZZER = container.querySelectorAll<BuzzerElement & HTMLElement>(\n      'wokwi-buzzer'\n    )\n    const PushButton = container.querySelectorAll<\n      PushbuttonElement & HTMLElement\n    >('wokwi-pushbutton')\n    const MemOuts = container.querySelectorAll<MemOutElement & HTMLElement>(\n      'memout-element'\n    )\n\n    const runner: AVRRunner = new AVRRunner(hex)\n\n    MHZ = MHZ || 16000000\n    cyclesPerFrame = cyclesPerFrame || 500000\n    frameDelayMilliseconds = frameDelayMilliseconds || 0\n\n    for (const PORT of PORTS) {\n      // Hook to PORTB register\n      const port = runner.port.get(PORT)\n\n      if (port) {\n        PushButton.forEach((button) => {\n          let [pin, p] = pinPort(button)\n\n          if (pin && p === PORT) {\n            port.setPin(pin % 8, false)\n\n            button.addEventListener('button-press', () => {\n              if (runner) {\n                port.setPin(pin % 8, true)\n              }\n            })\n\n            button.addEventListener('button-release', () => {\n              if (runner) {\n                port.setPin(pin % 8, false)\n              }\n            })\n          }\n        })\n\n        port.addListener((value) => {\n          LEDs.forEach((e) => {\n            let [pin, p] = pinPort(e)\n\n            if (pin && p === PORT) {\n              e.value = value & (1 << (pin - 8)) ? true : false\n            }\n          })\n\n          BUZZER.forEach((e) => {\n            let [pin, p] = pinPort(e)\n\n            if (pin && p === PORT) {\n              e.hasSignal = value & (1 << (pin - 8)) ? true : false\n            }\n          })\n\n          SEG7.forEach((e) => {\n            let [pin, p] = pinPort(e)\n\n            if (pin && p === PORT) {\n              e.values = [\n                value & 1,\n                value & 2,\n                value & 4,\n                value & 16,\n                value & 32,\n                value & 64,\n                value & 128,\n                value & 256,\n              ]\n            }\n          })\n        })\n      }\n    }\n\n    // Serial port output support\n    runner.usart.onLineTransmit = (value) => {\n      log(value)\n    }\n\n    const timeSpan = container.querySelector('#simulation-time')\n    runner.execute(\n      (cpu) => {\n        for (let m of MemOuts) m.updateData(cpu.data, cpu.cycles)\n        const time = formatTime(cpu.cycles / MHZ)\n        if (timeSpan) timeSpan.textContent = 'Simulation time: ' + time\n      },\n      cyclesPerFrame,\n      frameDelayMilliseconds\n    )\n\n    return runner\n  },\n}\n\nwindow.AVR8js = AVR8jsMem\n","import {\n  avrInstruction,\n  AVRTimer,\n  CPU,\n  timer0Config,\n  timer1Config,\n  timer2Config,\n  AVRUSART,\n  usart0Config,\n  AVRIOPort,\n  portBConfig,\n  portCConfig,\n  portDConfig,\n  avrInterrupt,\n} from \"avr8js\";\nimport { loadHex } from \"./intelhex\";\n\n// ATmega328p params\nconst FLASH = 0x8000;\n\nexport type PORT = \"A\" | \"B\" | \"C\" | \"D\"; //| 'E' | 'F' | 'G' | 'H' | 'J' | 'K' | 'L';\n\n//const PORTS:Array<PORT> = ['B','C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'L'];\n\nexport class AVRRunner {\n  readonly program = new Uint16Array(FLASH);\n  readonly cpu: CPU;\n  readonly timer0: AVRTimer;\n  readonly timer1: AVRTimer;\n  readonly timer2: AVRTimer;\n  readonly usart: AVRUSART;\n  readonly port = new Map<PORT, AVRIOPort>();\n  readonly MHZ = 16e6;\n  public serialBuffer: Array<number>;\n\n  private stopped = false;\n\n  constructor(hex: string) {\n    loadHex(hex, new Uint8Array(this.program.buffer));\n    this.cpu = new CPU(this.program);\n\n    this.timer0 = new AVRTimer(this.cpu, timer0Config);\n    this.timer1 = new AVRTimer(this.cpu, timer1Config);\n    this.timer2 = new AVRTimer(this.cpu, timer2Config);\n\n    //this.port.set('A', new AVRIOPort(this.cpu, portAConfig));\n    this.port.set(\"B\", new AVRIOPort(this.cpu, portBConfig));\n    this.port.set(\"C\", new AVRIOPort(this.cpu, portCConfig));\n    this.port.set(\"D\", new AVRIOPort(this.cpu, portDConfig));\n    //this.port.set('E', new AVRIOPort(this.cpu, portEConfig));\n    //this.port.set('F', new AVRIOPort(this.cpu, portFConfig));\n    //this.port.set('G', new AVRIOPort(this.cpu, portGConfig));\n    //this.port.set('H', new AVRIOPort(this.cpu, portHConfig));\n    //this.port.set('J', new AVRIOPort(this.cpu, portJConfig));\n    //this.port.set('K', new AVRIOPort(this.cpu, portKConfig));\n    //this.port.set('L', new AVRIOPort(this.cpu, portLConfig));\n    // create an ArrayBuffer with a size in bytes\n    this.serialBuffer = [];\n\n    this.usart = new AVRUSART(this.cpu, usart0Config, this.MHZ);\n    this.cpu.readHooks[usart0Config.UDR] = () => this.serialBuffer.shift() || 0;\n  }\n\n  async execute(\n    callback: (cpu: CPU) => void,\n    cyclesPerFrame: number,\n    frameDelayMilliseconds: number\n  ) {\n    this.stopped = false;\n    while (true) {\n      for (let i = 0; i < cyclesPerFrame; i++) {\n        avrInstruction(this.cpu);\n        this.timer0.tick();\n        this.timer1.tick();\n        this.timer2.tick();\n        this.usart.tick();\n\n        const ucsra = this.cpu.data[usart0Config.UCSRA];\n        if (\n          this.cpu.interruptsEnabled &&\n          ucsra & 0x20 &&\n          this.serialBuffer.length > 0\n        ) {\n          avrInterrupt(this.cpu, usart0Config.rxCompleteInterrupt);\n        }\n      }\n      callback(this.cpu);\n      await new Promise((resolve) =>\n        setTimeout(resolve, frameDelayMilliseconds)\n      );\n      if (this.stopped) {\n        break;\n      }\n    }\n  }\n  serial(input: string) {\n    for (var i = 0; i < input.length; i++) {\n      this.serialBuffer.push(input.charCodeAt(i));\n    }\n  }\n\n  stop() {\n    this.stopped = true;\n  }\n}\n","/**\n * Minimal Intel HEX loader\n * Part of AVR8js\n *\n * Copyright (C) 2019, Uri Shaked\n */\n\nexport function loadHex(source: string, target: Uint8Array) {\n  for (const line of source.split(\"\\n\")) {\n    if (line[0] === \":\" && line.substr(7, 2) === \"00\") {\n      const bytes = parseInt(line.substr(1, 2), 16);\n      const addr = parseInt(line.substr(3, 4), 16);\n      for (let i = 0; i < bytes; i++) {\n        target[addr + i] = parseInt(line.substr(9 + i * 2, 2), 16);\n      }\n    }\n  }\n}\n","function zeroPad(value: number, length: number) {\n  let sval = value.toString();\n  while (sval.length < length) {\n    sval = \"0\" + sval;\n  }\n  return sval;\n}\n\nexport function formatTime(seconds: number) {\n  const ms = Math.floor(seconds * 1000) % 1000;\n  const secs = Math.floor(seconds % 60);\n  const mins = Math.floor(seconds / 60);\n  return `${zeroPad(mins, 2)}:${zeroPad(secs, 2)}.${zeroPad(ms, 3)}`;\n}\n","// controlFunctionsCallback(stopFunction, sendSerialFunction): diese funktion wird con compileAndRun ausgeführt, wenn die Funktion, die den avr stopt bereit ist\n\nexport async function compileAndRun(codeString,divId, cyclesPerFrame,frameDelayMilliseconds, maxNumberOfCycles, controlFunctionsCallback, serialOutputHanlder) {\n    if (serialOutputHanlder == undefined) serialOutputHanlder = console.log;\n    serialOutputHanlder(\"compiling...\");\n    let e = await AVR8js.build(codeString , []);\n    console.log(e);\n    if (e.hex === \"\") {\n        let msgs = []\n\n        for(let i = 0; i<name.length; i++) {\n            msgs.push([])\n        }\n\n        let iter = e.stderr.matchAll(/(\\w+\\.\\w+):(\\d+):(\\d+): ([^:]+):(.+)/g)\n\n        /*for(let err=iter.next(); !err.done; err=iter.next()) {\n            msgs[name.findIndex((e) => e==err.value[1])].push({\n            row :    parseInt(err.value[2]) - 1,\n            column : parseInt(err.value[3]),\n            text :   err.value[5],\n            type :   err.value[4]\n            })\n        }*/\n        throw new Error(e.stderr + \" \" + msgs);\n    } else {\n        console.debug(e.stdout);\n        serialOutputHanlder(\"ready!\");\n        await new Promise(function(res,rej) {\n            if (e.hex) {\n                let runner = AVR8js.execute(\n                    e.hex, \n                    serialOutputHanlder,\n                    divId,\n                    undefined,\n                    cyclesPerFrame*1,\n                    frameDelayMilliseconds*1,\n                    maxNumberOfCycles ?? Infinity,\n                    function() {\n                        serialOutputHanlder(\"simmulation ended\");\n                        res();\n                    }\n                );\n                if (controlFunctionsCallback) controlFunctionsCallback(()=>runner.stop(),(s)=>runner.serial(s));\n            } else {\n                throw new Error(\"no hex!\");\n            }\n        });\n    }\n}\n","export function extractBit(integerValue, bitPosition) {\n    return (integerValue >> bitPosition) & 1;\n}\n\nexport function bytesToInt(b0,b1,b2,b3) {\n    //b1,b2,b3 optional\n    return (b0 & 0xff) | ((b1 & 0xff) << 8) | ((b2 & 0xff) << 16) | ((b3 & 0xff) << 24);\n}\n\nexport function bitsToInt() {\n    let i = 0;\n    let ret = 0;\n    for (let a of arguments) {\n        ret |= (a & 1) << i;\n        i++;\n    }\n    return ret;\n}\n\nexport function extractByte(integerValue, bytePosition) {\n    return (integerValue >> (bytePosition*8)) & 0xff;\n}\n"],"names":[],"version":3,"file":"module.js.map"}