{"mappings":";AGwBA;IACE,QAAQ,CAAC,OAAO,cAA0B;IAC1C,QAAQ,CAAC,GAAG,EAAE,GAAG,CAAC;IAClB,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC;IAC1B,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC;IAC1B,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC;IAC1B,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC;IACzB,QAAQ,CAAC,IAAI,MAA8B;IAC3C,QAAQ,CAAC,GAAG,YAAQ;IACb,YAAY,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;gBAIvB,GAAG,EAAE,MAAM;IA0BjB,OAAO,CACX,QAAQ,EAAE,CAAC,GAAG,EAAE,GAAG,KAAK,IAAI,EAC5B,cAAc,EAAE,MAAM,EACtB,sBAAsB,EAAE,MAAM;IA6BhC,MAAM,CAAC,KAAK,EAAE,MAAM;IAMpB,IAAI;CAGL;AElDD,OAAO,MAAM;IACX;;;;;;OAMG;oBAE4B,MAAM;uBA2BK,MAAM;IAahD;;;;;;;;;OASG;mBAEI,MAAM,OACN,GAAG,MACJ,MAAM,OACL,GAAG,kBACQ,GAAG,0BACK,GAAG,KAC1B,SAAS;CA0Gb,CAAA","sources":["src/src/memout.ts","src/src/memoutelements.ts","src/src/intelhex.ts","src/src/execute.ts","src/src/format-time.ts","src/src/index.ts","src/index.ts"],"sourcesContent":[null,null,null,null,null,null,"import '@wokwi/elements'\nimport { MemOutElement } from './memoutelements'\nimport { AVRRunner, PORT } from './execute'\nimport { formatTime } from './format-time'\n\nimport { compileAndRun } from './compileandrun'\nimport {\n  extractBit,\n  bytesToInt,\n  bitsToInt,\n  extractByte,\n} from './customfunctions'\n\nwindow.compileAndRun = compileAndRun\nwindow.extractBit = extractBit\nwindow.bytesToInt = bytesToInt\nwindow.bitsToInt = bitsToInt\nwindow.extractByte = extractByte\n\n//import \"./customfunctions\";\n\n//import { WS2812Controller } from \"./ws2812\";\n\nimport { MemOut } from './memout'\n\nimport {\n  BuzzerElement,\n  LEDElement,\n  PushbuttonElement,\n  SevenSegmentElement,\n} from '@wokwi/elements'\n\ndeclare const window: any\n\nfunction pinPort(e: any): [number | null, string | null] {\n  let port: PORT | null\n  let pin = e.getAttribute('pin')\n  pin = pin ? parseInt(pin, 10) : null\n\n  if (pin == null) {\n    port = null\n  } else if (pin < 8) {\n    port = 'D'\n  } else if (pin < 14) {\n    port = 'B'\n  } else if (pin < 20) {\n    port = 'C'\n  } else {\n    port = null\n  }\n\n  return [pin, port]\n}\n\nexport const AVR8jsMem = {\n  /** compiles the program\n   *\n   * @param sketch The cpp code as string\n   *\n   * @param files TODO\n   * @returns\n   */\n\n  build: async function (sketch: string, files = []) {\n    if (!window.__AVR8jsCache) {\n      window.__AVR8jsCache = {}\n    }\n\n    let body = JSON.stringify({ sketch: sketch, files })\n\n    if (window.__AVR8jsCache[body]) {\n      return window.__AVR8jsCache[body]\n    } else {\n      const resp = await fetch('https://hexi.wokwi.com/build', {\n        method: 'POST',\n        mode: 'cors',\n        cache: 'force-cache',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: body,\n      })\n      const rslt = await resp.json()\n\n      window.__AVR8jsCache[body] = rslt\n\n      return rslt\n    }\n  },\n\n  buildASM: async function asmToHex(source: string) {\n    const resp = await fetch('https://hexi.wokwi.com/asm', {\n      method: 'POST',\n      mode: 'cors',\n      cache: 'no-cache',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ source }),\n    })\n    return await resp.json()\n  },\n\n  /** starts the simulation\n   *\n   * @param hex machine code as hex string\n   * @param log log function\n   * @param id id of the div in which the summation is displayed\n   * @param MHZ cpu clock speed in HZ (default=16000000)\n   * @param cyclesPerFrame number of cpu cycles executed in an animation frame\n   * @param frameDelayMilliseconds delay between two animation frames in milliseconds. (0: no delay)\n   * @returns AVRRunner\n   */\n  execute: function (\n    hex: string,\n    log: any,\n    id: string,\n    MHZ: any,\n    cyclesPerFrame: any,\n    frameDelayMilliseconds: any\n  ): AVRRunner {\n    const PORTS: Array<PORT> = ['B', 'C', 'D']\n\n    const container = document.getElementById(id) || document\n\n    const LEDs: NodeListOf<LEDElement & HTMLElement> =\n      container.querySelectorAll('wokwi-led')\n    const SEG7 = container.querySelectorAll<SevenSegmentElement & HTMLElement>(\n      'wokwi-7segment'\n    )\n    const BUZZER = container.querySelectorAll<BuzzerElement & HTMLElement>(\n      'wokwi-buzzer'\n    )\n    const PushButton = container.querySelectorAll<\n      PushbuttonElement & HTMLElement\n    >('wokwi-pushbutton')\n    const MemOuts = container.querySelectorAll<MemOutElement & HTMLElement>(\n      'memout-element'\n    )\n\n    const runner: AVRRunner = new AVRRunner(hex)\n\n    MHZ = MHZ || 16000000\n    cyclesPerFrame = cyclesPerFrame || 500000\n    frameDelayMilliseconds = frameDelayMilliseconds || 0\n\n    for (const PORT of PORTS) {\n      // Hook to PORTB register\n      const port = runner.port.get(PORT)\n\n      if (port) {\n        PushButton.forEach((button) => {\n          let [pin, p] = pinPort(button)\n\n          if (pin && p === PORT) {\n            port.setPin(pin % 8, false)\n\n            button.addEventListener('button-press', () => {\n              if (runner) {\n                port.setPin(pin % 8, true)\n              }\n            })\n\n            button.addEventListener('button-release', () => {\n              if (runner) {\n                port.setPin(pin % 8, false)\n              }\n            })\n          }\n        })\n\n        port.addListener((value) => {\n          LEDs.forEach((e) => {\n            let [pin, p] = pinPort(e)\n\n            if (pin && p === PORT) {\n              e.value = value & (1 << (pin - 8)) ? true : false\n            }\n          })\n\n          BUZZER.forEach((e) => {\n            let [pin, p] = pinPort(e)\n\n            if (pin && p === PORT) {\n              e.hasSignal = value & (1 << (pin - 8)) ? true : false\n            }\n          })\n\n          SEG7.forEach((e) => {\n            let [pin, p] = pinPort(e)\n\n            if (pin && p === PORT) {\n              e.values = [\n                value & 1,\n                value & 2,\n                value & 4,\n                value & 16,\n                value & 32,\n                value & 64,\n                value & 128,\n                value & 256,\n              ]\n            }\n          })\n        })\n      }\n    }\n\n    // Serial port output support\n    runner.usart.onLineTransmit = (value) => {\n      log(value)\n    }\n\n    const timeSpan = container.querySelector('#simulation-time')\n    runner.execute(\n      (cpu) => {\n        for (let m of MemOuts) m.updateData(cpu.data, cpu.cycles)\n        const time = formatTime(cpu.cycles / MHZ)\n        if (timeSpan) timeSpan.textContent = 'Simulation time: ' + time\n      },\n      cyclesPerFrame,\n      frameDelayMilliseconds\n    )\n\n    return runner\n  },\n}\n\nwindow.AVR8js = AVR8jsMem\n"],"names":[],"version":3,"file":"types.d.ts.map"}